"""
첫 줄에는 트리의 정점의 총 수 V가 주어진다. 그 다음 줄에는 V-1개 간선이 나열된다.
간선은 그것을 이루는 두 정점으로 표기된다. 간선은 항상 "부모 자식" 순서로 표기된다.
아래 예에서 두 번째 줄 처음 1과 2는 정점 1과 2를 잇는 간선을 의미하며 10 부모, 2가 자식을 의미한다.
간선은 부모 정점 번호가 작은 것부터 나열되고, 부모 정점이 동일하다면 자식 정점 번호가 작은 것부터 나열된다.
- 다음 이진 트리 표현에 대하여 전위 순회하여 정점의 번호를 출력하시오.
13
1 2 1 3 2 4 3 5 3 6 4 7 5 8 5 9 6 10 6 11 7 12 11 13
"""


# 전위순회 함수
def preorder(n):
    if n:       # 존재하는 정점이면
        print(n, end=' ')            # visit(n)
        preorder(ch1[n])          # 왼쪽 서브트리로 이동
        preorder(ch2[n])          # 오른쪽 서브트리로 이동


V = int(input())        # 정점수, 마지막 정점 번호
E = V - 1               # tree의 간선 수 = 정점 수 - 1
arr = list(map(int,input().split()))
# 부모를 인덱스로 자식을 저장
ch1 = [0] * (V+1)
ch2 = [0] * (V+1)
# 자식을 인덱스로 부모를 저장
par = [0] * (V+1)
for i in range(E):
    a = arr[2*i]
    b = arr[2*i+1]
    if ch1[a] == 0:     # 자식 1이 아직 없으면
        ch1[a] = b
    else:
        ch2[a] = b
    par[b] = a          # 자식 인덱스에 부모 저장

# 실제 루트 찾기
root = 1
while par[root] != 0:
    root += 1
preorder(root)